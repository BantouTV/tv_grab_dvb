/*
 * Copyright 2010 Mo McRoberts.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* This is not real (CORBA, XP, DCE, Microsoft) IDL. This is a set of section
 * and descriptor definitions described by the ISO (MPEG) and ETSI (DVB)
 * specifications.
 *
 * gendvbtables converts this file into a C header which can be used
 * by DVB section/descriptor parsers.
 */

psi_section() {
	uimsbf table_id:8;
	bslbf section_syntax_indicator:1;
	bslbf reserved_future_use:1;
	bslbf reserved:2;
	uimsbf section_length:12;
}

/* PID = 0x0000, table_id = 0x00: Programme Association Table (PAT) */
programme_association_section() {
	uimsbf table_id:8;
	bslbf section_syntax_indicator:1;
	bslbf reserved_future_use:1;
	bslbf reserved:2;
	uimsbf section_length:12;
	uimsbf transport_stream_id:16;
	bslbf reserved:2;
	uimbsf version_number:5;
	bslbf current_next_indicator:1;
	uimsbf section_number:8;
	uimsbf last_section_number:8;
	for(i = 0; i < N; i++) {
		uimsbf program_number:16;
		bslbf reserved:3;
		uimsbf network_PID:13;
	}
	rpchof CRC_32:32;
}

/* table_id = 0x01: Conditional Access Table (CAT) */
CA_section() {
	uimsbf table_id:8;
	bslbf section_syntax_indicator:1;
	bslbf reserved_future_use:1;
	bslbf reserved:2;
	uimsbf section_length:12;
	bslbf reserved:18;
	uimbsf version_number:5;
	bslbf current_next_indicator:1;
	uimsbf section_number:8;
	uimsbf last_section_number:8;
	for(i = 0; i < N; i++) {
		descriptor();
	}
	rpchof CRC_32:32;
}

/* table_id = 0x02: Program Map Table (PMT) */
TS_program_map_section() {
	uimsbf table_id:8;
	bslbf section_syntax_indicator:1;
	bslbf reserved_future_use:1;
	bslbf reserved:2;
	uimsbf section_length:12;
	uimsbf program_number:16;
	bslbf reserved:2;
	uimbsf version_number:5;
	bslbf current_next_indicator:1;
	uimsbf section_number:8;
	uimsbf last_section_number:8;
	bslbf reserved:3;
	uimsbf PCR_PID:13;
	bslbf reserved:4;
	uimsbf program_info_length:12;
	for(i = 0; i < N; i++) {
		descriptor();
	}
	for(i = 0; i < N1; i++) {
		uimsbf stream_type:8;
		bslbf reserved:3;
		uimsbf elementary_PID:13;
		bslbf reserved:4;
		uimsbf ES_info_length:12;
		for(i = 0; i < N2; i++) {
			descriptor();
		}
	}
	rpchof CRC_32:32;
}

/* Private section */
private_section() {

}

network_information_section() {
	uimsbf table_id:8;
	bslbf section_syntax_indicator:1;
	bslbf reserved_future_use:1;
	bslbf reserved:2;
	uimsbf section_length:12;
	uimsbf network_id:16;
	bslbf reserved:2;
	uimbsf version_number:5;
	bslbf current_next_indicator:1;
	uimsbf section_number:8;
	uimsbf last_section_number:8;
	bslbf reserved_future_use:4;
	uimsbf network_descriptors_length:12;
	for(i=0; i < N; i++) {
		descriptor();
	}
	bslbf reserved_future_use:4;
	uimsbf transport_stream_loop_length:12;
	for(i=0; i < N; i++) {
		uimsbf transport_stream_id:16;
		uimsbf original_network_id:16;
		bslbf reserved_future_use:4;
		uimsbf transport_descriptors_length:12;
		for(j=0; j < N; j++) {
			descriptor();
		}
	}
	rpchof CRC_32:32;
}

			